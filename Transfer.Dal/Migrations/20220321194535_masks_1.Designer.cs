// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transfer.Dal.Context;

namespace Transfer.Dal.Migrations
{
    [DbContext(typeof(TransferContext))]
    [Migration("20220321194535_masks_1")]
    partial class masks_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:IdentityIncrement", 1)
                .HasAnnotation("SqlServer:IdentitySeed", 1)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Transfer.Dal.Entities.DbAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("PersonDataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonDataId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbAccountRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RightId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("RightId");

                    b.HasIndex("AccountId", "RightId", "OrganisationId")
                        .IsUnique()
                        .HasFilter("[RightId] IS NOT NULL AND [OrganisationId] IS NOT NULL");

                    b.ToTable("AccountRights");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbBankDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Bik")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Inn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KorAccount")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Kpp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<string>("NameAccount")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NumAccount")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbBus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AirConditioner")
                        .HasColumnType("bit");

                    b.Property<bool>("Audio")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("LuggageVolume")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Microphone")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PeopleCopacity")
                        .HasColumnType("int");

                    b.Property<bool>("SaftyBelts")
                        .HasColumnType("bit");

                    b.Property<bool>("TV")
                        .HasColumnType("bit");

                    b.Property<bool>("WC")
                        .HasColumnType("bit");

                    b.Property<bool>("Wifi")
                        .HasColumnType("bit");

                    b.Property<int>("Yaer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbBusFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UploaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("FileId");

                    b.HasIndex("UploaderId");

                    b.ToTable("BusFiles");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbDriver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TelegramId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PersonDataId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbDriverFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UploaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("FileId");

                    b.HasIndex("UploaderId");

                    b.ToTable("DriverFiles");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbDriversLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentCatigories")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DocumentDateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DocumentEndDateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentIssurer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentSeries")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverLicenses");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbExternalLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LoginType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubValue")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ExternalLogins");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extention")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbOrganisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Agreement")
                        .HasColumnType("bit");

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DirectorFio")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DirectorPosition")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FactAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("INN")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OGRN")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbOrganisationAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationAccounts");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbOrganisationFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UploaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UploaderId");

                    b.ToTable("OrganisationFiles");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbOrganisationWorkingArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("RegionId");

                    b.ToTable("OrganisationWorkingAreas");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbPersonData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DocumentDateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentIssurer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentSeries")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentSubDivisionCode")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RealAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RegistrationAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("PersonDatas");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbRegion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbTripOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("TripOptions");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbTripRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressFrom")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AddressTo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ChartererId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ContactFio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<int?>("LuggageVolume")
                        .HasColumnType("int");

                    b.Property<int>("Passengers")
                        .HasColumnType("int");

                    b.Property<DateTime>("TripDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("СhartererName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ChartererId");

                    b.ToTable("TripRequests");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbTripRequestOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("LastUpdateTick")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TripOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TripRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TripOptionId");

                    b.HasIndex("TripRequestId");

                    b.ToTable("TripRequestOptions");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbAccount", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbPersonData", "PersonData")
                        .WithMany("Accounts")
                        .HasForeignKey("PersonDataId");

                    b.Navigation("PersonData");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbAccountRight", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbAccount", "Account")
                        .WithMany("AccountRights")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Transfer.Dal.Entities.DbOrganisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("Transfer.Dal.Entities.DbRight", "Right")
                        .WithMany("AccountRights")
                        .HasForeignKey("RightId");

                    b.Navigation("Account");

                    b.Navigation("Organisation");

                    b.Navigation("Right");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbBankDetails", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbOrganisation", "Organisation")
                        .WithMany("BankDetails")
                        .HasForeignKey("OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbBus", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbOrganisation", "Organisation")
                        .WithMany("Buses")
                        .HasForeignKey("OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbBusFile", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbBus", "Bus")
                        .WithMany("BusFiles")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Transfer.Dal.Entities.DbFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Transfer.Dal.Entities.DbAccount", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("File");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbDriver", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbOrganisation", "Organisation")
                        .WithMany("Drivers")
                        .HasForeignKey("OrganisationId");

                    b.HasOne("Transfer.Dal.Entities.DbPersonData", "PersonData")
                        .WithMany("Drivers")
                        .HasForeignKey("PersonDataId");

                    b.Navigation("Organisation");

                    b.Navigation("PersonData");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbDriverFile", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbDriver", "Driver")
                        .WithMany("DriverFiles")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Transfer.Dal.Entities.DbFile", "File")
                        .WithMany("DriverFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Transfer.Dal.Entities.DbAccount", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("File");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbDriversLicense", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbDriver", "Driver")
                        .WithMany("DbDriversLicenses")
                        .HasForeignKey("DriverId");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbExternalLogin", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbAccount", "Account")
                        .WithMany("ExternalLogins")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbOrganisation", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbRegion", "Region")
                        .WithMany("Organisations")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbOrganisationAccount", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbAccount", "Account")
                        .WithMany("Organisations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Transfer.Dal.Entities.DbOrganisation", "Organisation")
                        .WithMany("Accounts")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbOrganisationFile", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbFile", "File")
                        .WithMany("OrganisationFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Transfer.Dal.Entities.DbOrganisation", "Organisation")
                        .WithMany("Files")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Transfer.Dal.Entities.DbAccount", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Organisation");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbOrganisationWorkingArea", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbOrganisation", "Organisation")
                        .WithMany("WorkingArea")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Transfer.Dal.Entities.DbRegion", "Region")
                        .WithMany("WorkingArea")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbTripRequest", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbOrganisation", "Charterer")
                        .WithMany("TripRequests")
                        .HasForeignKey("ChartererId");

                    b.Navigation("Charterer");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbTripRequestOption", b =>
                {
                    b.HasOne("Transfer.Dal.Entities.DbTripOption", "TripOption")
                        .WithMany("TripRequests")
                        .HasForeignKey("TripOptionId");

                    b.HasOne("Transfer.Dal.Entities.DbTripRequest", "TripRequest")
                        .WithMany("TripOptions")
                        .HasForeignKey("TripRequestId");

                    b.Navigation("TripOption");

                    b.Navigation("TripRequest");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbAccount", b =>
                {
                    b.Navigation("AccountRights");

                    b.Navigation("ExternalLogins");

                    b.Navigation("Organisations");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbBus", b =>
                {
                    b.Navigation("BusFiles");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbDriver", b =>
                {
                    b.Navigation("DbDriversLicenses");

                    b.Navigation("DriverFiles");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbFile", b =>
                {
                    b.Navigation("DriverFiles");

                    b.Navigation("OrganisationFiles");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbOrganisation", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("BankDetails");

                    b.Navigation("Buses");

                    b.Navigation("Drivers");

                    b.Navigation("Files");

                    b.Navigation("TripRequests");

                    b.Navigation("WorkingArea");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbPersonData", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbRegion", b =>
                {
                    b.Navigation("Organisations");

                    b.Navigation("WorkingArea");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbRight", b =>
                {
                    b.Navigation("AccountRights");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbTripOption", b =>
                {
                    b.Navigation("TripRequests");
                });

            modelBuilder.Entity("Transfer.Dal.Entities.DbTripRequest", b =>
                {
                    b.Navigation("TripOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
